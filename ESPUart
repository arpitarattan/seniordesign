#include "stm32f0xx.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

//#include "mtwister.h"
void inita();
void setn();
void setn(int32_t pin_num, int32_t val);
int32_t readpin(int32_t pin_num);
void init_usart5();
void USART5_SendChar(char c);
void USART5_SendString(char* str, char test);
void mysleep(int time) {
    for(int n = 0; n < time; n++);
}


void init_tim2() {
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
    TIM2->PSC = 48000 - 1;
    TIM2->ARR = 10000 - 1;
    TIM2->CR1 &= ~TIM_CR1_DIR;

}

void start_timer(){
    TIM2->CR1 |= TIM_CR1_CEN;
}
uint32_t end_timer() {
    TIM2->CR1 &= ~TIM_CR1_CEN;
    return TIM2->CNT;
}


uint32_t standard_reaction_time_test() {
	int button = 2;
	int red = 1;
	int green = 0;
    int num = rand();

    while(readpin(button) == 0);//user needs to press button to start game
    setn(red, 1);              //turn the red led light on
    mysleep(9000000);             //a min amount of time
    //mysleep(num);             //a random amount of time for the green led to turn on
    //delay(5000);
    setn(green,1);                //turn the green led on
    setn(red,0);               //turn the red led off
    start_timer();
    while(readpin(button) == 0); //wait for user to press button
    setn(green,0);                //turn off green led
    setn(red,0);
    uint32_t reaction_time = end_timer();
    mysleep(1000000);
    //while(readpin(button) == 0){
        setn(green,0);                //turn off green led
        setn(red,0);
   // }
    //mysleep(1000000);            //wait
    return reaction_time;
}

int main(void)
{
	inita();
	init_tim2();
	init_usart5();
	uint32_t reaction_time = standard_reaction_time_test();
	//int temp = 12345;
	//uint32_t reaction_time = 123;
	char floatstr[20]; //random sze for now
	setn(0,1);
	sprintf(floatstr, "%lu", reaction_time);
	USART5_SendString(floatstr, 'r');
	setn(1,1);

}

void inita() {
	//input PA5
	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;
	GPIOA -> MODER &= ~GPIO_MODER_MODER2;
	GPIOA-> PUPDR  &= ~GPIO_PUPDR_PUPDR2;

	GPIOA-> PUPDR |= GPIO_PUPDR_PUPDR2_1;

	//output PA6 & PA7
	GPIOA -> MODER &= ~GPIO_MODER_MODER0;
	GPIOA -> MODER &= ~GPIO_MODER_MODER1;

	GPIOA -> MODER |= GPIO_MODER_MODER0_0;
	GPIOA -> MODER |= GPIO_MODER_MODER1_0;
}


void USART5_SendChar(char c) {
    while(!(USART5->ISR & USART_ISR_TXE));
    if(c == '\n'){
        USART5->TDR = '\r';
    }
    while(!(USART5->ISR & USART_ISR_TXE));
    USART5->TDR = c;
}

void USART5_SendString(char* str, char test) {
	USART5_SendChar(test);
	USART5_SendChar('\n');
    while (*str) {
        USART5_SendChar(*str++);
    }
    USART5_SendChar('\r');
    USART5_SendChar('\n');
}

void init_usart5() {
	//PC12 IS TX PD2 IS RX
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    RCC->AHBENR |= RCC_AHBENR_GPIODEN;

    //AF MODE for PC12
    GPIOC -> MODER &= ~GPIO_MODER_MODER12_0;
    GPIOC -> MODER |= GPIO_MODER_MODER12_1;

    GPIOC -> AFR[1] &= ~GPIO_AFRH_AFR12;
    GPIOC -> AFR[1] |= 0x00020000;

    //AF MODE for PD2
    GPIOD -> MODER &= ~GPIO_MODER_MODER2_0;
    GPIOD -> MODER |= GPIO_MODER_MODER2_1;

    GPIOD -> AFR[0] &= ~GPIO_AFRL_AFR2;
    GPIOD -> AFR[0] |= 0x00000200;

    RCC -> APB1ENR |= RCC_APB1ENR_USART5EN;

    USART5 -> CR1 &= ~USART_CR1_UE;

    // already set ti 8 bits and one stop bit
    // no parity set to defult
    // 16x oversampling set

    USART5 -> BRR = 0x1388;
    USART5 -> CR1 |= USART_CR1_TE;
    USART5 -> CR1 |= USART_CR1_UE;
   // while(!(USART5->ISR & USART_ISR_TXE));
   // while(!(USART5 ->ISR & USART_FLAG_TEACK)){
        // wait for TE
    //}
}

void setn(int32_t pin_num, int32_t val) {
    if(val == 0){

        GPIOA -> BRR |= 1 << pin_num;
    }
    else{
        GPIOA -> BSRR |= 1 << pin_num;

    }
}

int32_t readpin(int32_t pin_num) {
    int32_t readit = 0;
    readit = (GPIOA -> IDR);
    //readit = (GPIOB -> IDR) & 0x1;

    readit = (readit & (1 << pin_num)) >> pin_num;

    return readit;
}

