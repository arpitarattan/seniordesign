#include "stm32f0xx.h"
#include <stdio.h>
#include <stdlib.h>

char dig_char[] = "0123456789ABCDEF";


struct node
{
    int data;
    struct node *next;
};

struct node *front = NULL;
struct node *rear = NULL;

//void display();
void enqueue(int);
int dequeue();

// Be sure to change this to your login...
const char login[] = "xyz";

// how many rand values you want
//volatile int sequence_len = 12;
int srand_val = 4568954;


void set_char_msg(int, char);
void nano_wait(unsigned int);

// useless functions to make the makefile given work properly
void setup_bb(void){}
void bb_write_bit(int val){}
void bb_write_halfword(int halfword){}
void drive_bb(void){}
void spi1_init_oled(){}
void spi1_display1(const char *string){}
void spi1_display2(const char *string){}
uint16_t display[34] = {};
void spi1_setup_dma(void){}
void spi1_enable_dma(void){}
void init_spi1() {}

// displaying on seven seg

uint8_t col; // the column being scanned

void drive_column(int);   // energize one of the column outputs
int  read_rows();         // read the four row inputs
void update_history(int col, int rows); // record the buttons of the driven column
char get_key_event(); // wait for a button event (press or release)
char get_keypress(void);  // wait for only a button press event.
float getfloat(void);     // read a floating-point number from keypad
void show_keys(void);     // demonstrate get_key_event()

//===========================================================================
// Configure GPIOC
//===========================================================================
void enable_ports(void) {
    RCC -> AHBENR |= RCC_AHBENR_GPIOCEN;


    // PC4 - PC7 set to output
    GPIOC -> MODER |= GPIO_MODER_MODER7_0;
    GPIOC -> MODER &= ~GPIO_MODER_MODER7_1;

    GPIOC -> MODER |= GPIO_MODER_MODER8_0;
    GPIOC -> MODER &= ~GPIO_MODER_MODER8_1;

    GPIOC -> MODER |= GPIO_MODER_MODER9_0;
    GPIOC -> MODER &= ~GPIO_MODER_MODER9_1;

    GPIOC -> MODER |= GPIO_MODER_MODER10_0;
    GPIOC -> MODER &= ~GPIO_MODER_MODER10_1;



    // PC4 - PC7 set to output open type
    GPIOC -> OTYPER |= GPIO_OTYPER_OT_7;

    GPIOC -> OTYPER |= GPIO_OTYPER_OT_8;

    GPIOC -> OTYPER |= GPIO_OTYPER_OT_9;

    GPIOC -> OTYPER |= GPIO_OTYPER_OT_10;

    //PC0 - PC3 set to input
    GPIOC -> MODER &= ~GPIO_MODER_MODER3;
    GPIOC -> MODER &= ~GPIO_MODER_MODER4;
    GPIOC -> MODER &= ~GPIO_MODER_MODER5;
    GPIOC -> MODER &= ~GPIO_MODER_MODER6;


    // PC0 - PC3 set to be internally pulled high
    GPIOC -> PUPDR &= ~GPIO_PUPDR_PUPDR3_1;
    GPIOC -> PUPDR &= ~GPIO_PUPDR_PUPDR4_1;
    GPIOC -> PUPDR &= ~GPIO_PUPDR_PUPDR5_1;
    GPIOC -> PUPDR &= ~GPIO_PUPDR_PUPDR6_1;

    GPIOC -> PUPDR |= GPIO_PUPDR_PUPDR3_0;
    GPIOC -> PUPDR |= GPIO_PUPDR_PUPDR4_0;
    GPIOC -> PUPDR |= GPIO_PUPDR_PUPDR5_0;
    GPIOC -> PUPDR |= GPIO_PUPDR_PUPDR6_0;






    pop_queue();
    pop_queue();


}


//===========================================================================
// Configure timer 7 to invoke the update interrupt at 1kHz
// Copy from lab 8 or 9.
//===========================================================================
void init_tim7()
{
  // Turn on clock, can write
  // 0x20 instead
  RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;

  // Configure to run at 1kHz
  TIM7->PSC = 48-1;
  TIM7->ARR = 1000-1;

  // Enable the interrupt,
  // can write 0x01 instead
  TIM7->DIER |= TIM_DIER_UIE;

  // Unmask the interrupt
  NVIC->ISER[0] |= 1<<TIM7_IRQn;

  // Enable timer, can write
  // 0x01 instead
  TIM7->CR1 |= TIM_CR1_CEN;
}

//===========================================================================
// Copy the Timer 7 ISR from lab 9
//===========================================================================
// TODO To be copied
void TIM7_IRQHandler(void)
{
  // Code is given in lab 9
  TIM7->SR &= ~TIM_SR_UIF;
  int rows = read_rows();
  update_history(col, rows);
  col = (col + 1) & 3;
  drive_column(col);
}

//===========================================================================
// 4.1 Bit Bang SPI LED Array
//===========================================================================
// Given
int msg_index = 0;
uint16_t msg[8] = { 0x0000,0x0100,0x0200,0x0300,0x0400,0x0500,0x0600,0x0700 };
extern const char font[];

//===========================================================================
// Configure PB12 (NSS), PB13 (SCK), and PB15 (MOSI) for outputs
//===========================================================================

void small_delay(void)
{
  // Given.
  nano_wait(50000);
}



//============================================================================
// setup_dma()
// Copy this from lab 8 or lab 9.
// Write to SPI2->DR instead of GPIOB->ODR.
//============================================================================
void setup_dma(void)
{
  // Turn on DMA1
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;

  // Configure DMA. They should be using channel 5.

  DMA1_Channel5->CCR &= ~DMA_CCR_EN;
  DMA1_Channel5->CPAR = (uint32_t) &(SPI1->DR);
  DMA1_Channel5->CMAR = (uint32_t) &(msg);
  DMA1_Channel5->CNDTR = 8;
  DMA1_Channel5->CCR |= DMA_CCR_DIR;
  DMA1_Channel5->CCR |= DMA_CCR_MINC;
  DMA1_Channel5->CCR &= ~DMA_CCR_PINC;
  DMA1_Channel5->CCR |= 0x0500;
  DMA1_Channel5->CCR |= DMA_CCR_CIRC;

}

//============================================================================
// enable_dma()
// Copy this from lab 8 or lab 9.
//============================================================================
void enable_dma(void)
{
  // Enable the DMA.
  DMA1_Channel5->CCR |= DMA_CCR_EN;

}


void init_tim15(void)
{
  // Turn timer's clock on,
  // can write 0x0001000 instead
  RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;

  // Turn timer off, can write
  // 0x0001 instead.
  TIM15->CR1 &= ~TIM_CR1_CEN;

  // Configure PSC and ARR to
  // 1kHz
  TIM15->PSC = 48-1;
  TIM15->ARR = 1000-1;

  // Trigger the DMA transfer,
  // can write 0x0100 instead.
  TIM15->DIER |= TIM_DIER_UDE;

  // Turn timer on, can write
  // 0x0001 instead.
  TIM15->CR1 |= TIM_CR1_CEN;
}

//===========================================================================
// Initialize the SPI1 peripheral.
//===========================================================================

// actually using SPI 1
void init_spi2(void)
{
  // Enable port B, can write
  // 0x00004000 instead
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

  // Set PB12, 13, 15 into AF mode.
  // Like earlier, they can use the
  // CMSIS calls.
  GPIOA->MODER &= ~(GPIO_MODER_MODER7| GPIO_MODER_MODER5 | GPIO_MODER_MODER4);
  GPIOA->MODER |=  GPIO_MODER_MODER7_1| GPIO_MODER_MODER5_1 | GPIO_MODER_MODER4_1;


  GPIOA->AFR[0] &= ~0xF0FF0000;

  // Turn on RCC clock,
  // can write 0x00004000 instead.
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

  // Turn off the channel
  // for configuration, can write 0x0040
  SPI1->CR1 &= ~SPI_CR1_SPE;

  // Turn baud rate to lowest,
  // can write 0x0038 instead
  SPI1->CR1 |= SPI_CR1_BR;

  // Set data size to 16 bit,
  // can write 0x0f00 instead
  SPI1->CR2 |= SPI_CR2_DS;

  // Turn on master mode,
  // can write 0x0004 instead
  SPI1->CR1 |= SPI_CR1_MSTR;

  // Enable SSOE and NSSP,
  // can write 0x000c instead
  SPI1->CR2 |= SPI_CR2_SSOE | SPI_CR2_NSSP;

  // Trigger a DMA transfer,
  // can write 0x0002 instead
  SPI1->CR2 |= SPI_CR2_TXDMAEN;

  // Turn the spi channel back on,
  // can write 0x0040 instead
  SPI1->CR1 |= SPI_CR1_SPE;


}

//===========================================================================
// Configure the SPI2 peripheral to trigger the DMA channel when the
// transmitter is empty.
//===========================================================================
void spi2_setup_dma(void)
{
  // Given.
  setup_dma();
  SPI1->CR2 |= SPI_CR2_TXDMAEN; // Transfer register empty DMA enable
}

//===========================================================================
// Enable the DMA channel.
//===========================================================================
void spi2_enable_dma(void)
{
  // Given.
  enable_dma();
}


void spi_cmd(unsigned int data)
{
  // Given.
  while(!(SPI2->SR & SPI_SR_TXE)) {}
  SPI2->DR = data;
}
void spi_data(unsigned int data)
{
  // Given.
  spi_cmd(data | 0x200);
}



char middle_char(){
    char c = get_keypress();
    return c;

}


void print_string(const char str[])
{
    const char *p = str;
    for(int i=0; i<8; i++) {
        if (*p == '\0') {
            msg[i] = (i<<8);
        } else {
            msg[i] = (i<<8) | font[*p & 0x7f] | (*p & 0x80);
            p++;
        }
    }
}

void shift_disp_right(char* str){
	char str_7 = str[7];
	char str_6 = str[6];
	char str_5 = str[5];
	str[6] = str_7;
	str[5] = str_6;
	str[4] = str_5;
}

//===========================================================================
// Queue function
//===========================================================================



void rand_queue(int seq)
{
  //display();
  //dequeue();
	srand(srand_val);
	for(int i =0; i< seq ; i++){
		int n = rand() % 16;
		enqueue(n);
	}
	//display();
	enqueue(69);
	//display();

	//printf("\n\nnumber first in queue is %d\n", num);
}

void enqueue(int item)
{
    struct node *nptr = malloc(sizeof(struct node));
    nptr->data = item;
    nptr->next = NULL;
    if (rear == NULL)
    {
        front = nptr;
        rear = nptr;
    }
    else
    {
        rear->next = nptr;
        rear = rear->next;
    }
}



int dequeue()
{
  int num = 0;
    if (front == NULL)
    {
        printf("\n\nqueue is empty \n");
    }
    else
    {
        struct node *temp;
        temp = front;
        front = front->next;
        printf("\n\n%d deleted", temp->data);
        num = temp -> data;
        free(temp);
    }
  return(num);
}





//===========================================================================
// GAME functions
//===========================================================================
void display_rand(char* string){
    for(;;){
    	int num_queue = dequeue();
    	if(num_queue == 69){
    		break;
    	}


    	char rand_c = dig_char[num_queue];


    	string[6] = rand_c;
    	print_string(string);
    	nano_wait(700000000);
    	string[6] = ' ';
    	print_string(string);
    	nano_wait(200000000);



    	enqueue(num_queue);
    }
    nano_wait(400000000);
    string[5] = 'G';
    string[6] = 'O';


    print_string(string);
    nano_wait(500000000);
    string[5] = ' ';
    string[6] = ' ';

    print_string(string);
}

void play_SMT(char* string, int seq){
	int i = 1;
	for(;;){
			char c = middle_char();

			// used to push data from digit 4 -7 adn repeat 1234 -> 5234 -> 5634 ...
			//int digit = i % 4;
			shift_disp_right(string);
			string[7] = c;


			print_string(string);

			// gets number from queue and then changes it to char.
			int num_ran = dequeue();

			if(c != dig_char[num_ran]){
				print_string("too bad");
				break;
			}
			else if(i == seq){
				nano_wait(500000000);
				print_string("yay  yay");
				break;
			}
			i++;


		}
}


//===========================================================================
// Main function
//===========================================================================

int main(void) {

	    init_tim7();
	    setup_bb();
	    init_spi2();
	    setup_dma();
	    enable_dma();
	    init_tim15();
	    int seq = 0;


	    char string[9] = "        ";
	    print_string(string);
	    // Enables the keypad after
	    enable_ports();
	    print_string("SELECT");
	    while(1){
	    	char first = middle_char();
	    	string[0] = 'S';
	    	string[1] = 'E';
	    	string[2] = 'L';
	    	string[3] = 'E';
	    	string[4] = 'C';
	    	string[5] = 'T';
	    	string[6] = ' ';
	    	string[7] = first;
	    	print_string(string);
	    	nano_wait(5000000000);

	    	seq = (first - '0');
	    	break;


	    }
    	string[0] = ' ';
    	string[1] = ' ';
    	string[2] = ' ';
    	string[3] = ' ';
    	string[4] = ' ';
    	string[5] = ' ';
    	string[6] = ' ';
    	string[7] = ' ';
    	print_string(string);
    	nano_wait(5000000000);

		rand_queue(seq);

		RCC->AHBENR &= ~RCC_AHBENR_GPIOCEN;
	    display_rand(string);
	    // Enables the keypad after
	    enable_ports();

	    play_SMT(string, seq);

	    //clear_queue();


}
