#include "stm32f0xx.h"
#include <stdio.h>
#include <stdlib.h>

char dig_char[] = "0123456789ABCDEF";


void set_char_msg(int, char);
void nano_wait(unsigned int);
void flash_debug_pattern(uint16_t);


// displaying on seven seg
void small_delay(void) {
    nano_wait(5000);
}
uint8_t col_B; // the column being scanned

void drive_column(int);   // energize one of the column outputs
int  read_rows();         // read the four row inputs
void update_history(int col, int rows); // record the buttons of the driven column
char get_key_event(); // wait for a button event (press or release)
char get_keypress(void);  // wait for only a button press event.
float getfloat(void);     // read a floating-point number from keypad
void show_keys(void);     // demonstrate get_key_event()

uint8_t VMT_arry[4];
uint8_t OFF_arry[4];

//===========================================================================
// Configure GPIOC
//===========================================================================
void enable_ports_B(void) {
    RCC -> AHBENR |= RCC_AHBENR_GPIOBEN;


    // PC4 - PC7 set to output
    GPIOB -> MODER |= GPIO_MODER_MODER6_0;
    GPIOB -> MODER &= ~GPIO_MODER_MODER6_1;

    GPIOB -> MODER |= GPIO_MODER_MODER5_0;
    GPIOB -> MODER &= ~GPIO_MODER_MODER5_1;

    GPIOB -> MODER |= GPIO_MODER_MODER4_0;
    GPIOB -> MODER &= ~GPIO_MODER_MODER4_1;

    GPIOB -> MODER |= GPIO_MODER_MODER7_0;
    GPIOB -> MODER &= ~GPIO_MODER_MODER7_1;



    // PC4 - PC7 set to output open type
    GPIOB -> OTYPER |= GPIO_OTYPER_OT_6;

    GPIOB -> OTYPER |= GPIO_OTYPER_OT_5;

    GPIOB -> OTYPER |= GPIO_OTYPER_OT_4;

    GPIOB -> OTYPER |= GPIO_OTYPER_OT_7;

    //PC0 - PC3 set to input
    GPIOB -> MODER &= ~GPIO_MODER_MODER11;
    GPIOB -> MODER &= ~GPIO_MODER_MODER8;
    GPIOB -> MODER &= ~GPIO_MODER_MODER9;
    GPIOB -> MODER &= ~GPIO_MODER_MODER10;


    // PC0 - PC3 set to be internally pulled high
    GPIOB -> PUPDR &= ~GPIO_PUPDR_PUPDR11_1;
    GPIOB -> PUPDR &= ~GPIO_PUPDR_PUPDR8_1;
    GPIOB -> PUPDR &= ~GPIO_PUPDR_PUPDR9_1;
    GPIOB -> PUPDR &= ~GPIO_PUPDR_PUPDR10_1;

    GPIOB -> PUPDR |= GPIO_PUPDR_PUPDR11_0;
    GPIOB -> PUPDR |= GPIO_PUPDR_PUPDR8_0;
    GPIOB -> PUPDR |= GPIO_PUPDR_PUPDR9_0;
    GPIOB -> PUPDR |= GPIO_PUPDR_PUPDR10_0;






    pop_queue_B();
    pop_queue_B();


}


//===========================================================================
// Configure timer 7 to invoke the update interrupt at 1kHz
// Copy from lab 8 or 9.
//===========================================================================
void init_tim6()
{
  // Turn on clock, can write
  // 0x20 instead
  RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;

  // Configure to run at 1kHz
  TIM6->PSC = 48-1;
  TIM6->ARR = 1000-1;

  // Enable the interrupt,
  // can write 0x01 instead
  TIM6->DIER |= TIM_DIER_UIE;

  // Unmask the interrupt===
  NVIC->ISER[0] |= 1<<TIM6_DAC_IRQn;

  // Enable timer, can write
  // 0x01 instead
  TIM6->CR1 |= TIM_CR1_CEN;
}
void TIM6_DAC_IRQHandler(void)
{
  // Code is given in lab 9
  TIM6->SR &= ~TIM_SR_UIF;

  int rows = read_rows_B();
  update_history_B(col_B, rows);
  col_B = (col_B + 1) & 3;
  drive_column_B(col_B);
}



void init_tim16()
{
  // Turn on clock, can write
  // 0x20 instead
  RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;

  // Configure to run at 1kHz
  TIM16->PSC = 4-1;
  TIM16->ARR = 1000-1;

  // Enable the interrupt,
  // can write 0x01 instead
  TIM16->DIER |= TIM_DIER_UIE;

  // Unmask the interrupt===
  NVIC->ISER[0] |= 1<<TIM16_IRQn;

  // Enable timer, can write
  // 0x01 instead
  TIM16->CR1 |= TIM_CR1_CEN;
}
void TIM16_IRQHandler(){
	TIM16 -> SR &= ~TIM_SR_UIF;

	Display_RGB();
}

void enable_VMT(){
    RCC -> AHBENR |= RCC_AHBENR_GPIOBEN;

    GPIOB -> MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER12 | GPIO_MODER_MODER13 | GPIO_MODER_MODER15);
    GPIOB -> MODER |= GPIO_MODER_MODER0_0;
    GPIOB -> MODER |= GPIO_MODER_MODER12_0;
    GPIOB -> MODER |= GPIO_MODER_MODER13_0;
    GPIOB -> MODER |= GPIO_MODER_MODER15_0;


	GPIOB -> BSRR |= GPIO_BSRR_BR_0;




}

//===========================================================================
// Copy the Timer 7 ISR from lab 9
//===========================================================================


int get_char_VMT(){
    int c = get_keypress_B();

    // reverse direction

    // convert to binary
//   c = 0x1 << (c - 1);
    return c;

}

int play_VMT(){
	//enqueue(69);
    RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;
    GPIOA -> MODER &= ~(GPIO_MODER_MODER15);
    GPIOA -> MODER |= GPIO_MODER_MODER15_0;
	flash_pattern(0x0000);
	int i = 0;
	uint16_t key_int = 0;
	for(;;){
		i++;
		Display_RGB();
		if(i > 30){
			int c = get_keypress_B();
			key_int = key_int | 1 << (c - 1);
			GPIOA -> BSRR = get_char_VMT();
			flash_pattern(key_int);
			i = 0;
		}
		//char c = get_keypress_B();
//		if(get_keypress_B()){
//			GPIOA -> BSRR = GPIO_BSRR_BS_15;
//			//flash_pattern(0x1111);
//		}
		// to access breakpoint for debugging




		}
}

void flash_pattern(unsigned short pattern) {
	unsigned int row = 0xE;
	unsigned int shiftbyte;

	for (unsigned int i = 0; i < 4; i++) { // Loop over rows
		shiftbyte = (row << 4) + (pattern % 16); // convert pattern row to shiftable byte


		VMT_arry[i] = shiftbyte; // Store in array

		pattern >>= 4;
		row <<= 1;
		row += 1;
		row &= 0xF;
	}
}

void flash_debug_pattern(uint16_t pattern){
	uint8_t row = 0x00;
	uint8_t shiftbyte;

	for (int i = 0; i < 4; i++) { // Loop over rows
		shiftbyte = (row << 4) + (pattern % 16); // convert pattern row to shiftable byte
		VMT_arry[i] = shiftbyte; // Store in array

		pattern >>= 4;
		row &= 0xF;
	}
}


void shiftout(uint8_t byte){

	for(uint8_t i = 0; i < 8; i++){
		uint val = byte & (1 << (7 - i)); // Bit value of byte
		if(val){
			GPIOB -> BSRR |= GPIO_BSRR_BS_15; // Set high if val is high
		}
		else{
			GPIOB -> BRR |= GPIO_BRR_BR_15; // Low otherwise
		}
		GPIOB -> BSRR |= GPIO_BSRR_BS_13; // Clock on
	    small_delay();
		GPIOB -> BRR |= GPIO_BRR_BR_13; // Clock off
	    small_delay();


	}


}

void Display_RGB(){

	for(int i = 0; i < 4; i++){ // For each row
		GPIOB -> BRR |= GPIO_BRR_BR_12; // Set latch low
		uint8_t val_ary = VMT_arry[i]; // for debug
		shiftout(VMT_arry[i]); // Shiftout our row to RGB matrix
		uint8_t zero_val = 0x00;
		shiftout(zero_val); // template 0, but eventually expand to other colors
		GPIOB -> BSRR |= GPIO_BSRR_BS_12; // Set latch high
		nano_wait(2000000);

	}
//	GPIOB -> BRR |= GPIO_BRR_BR_12;
//	GPIOB -> BRR |= GPIO_BRR_BR_13; // Clock off



	//asm("nop");
}

void adjust_priorities() {
    NVIC_EnableIRQ(TIM6_DAC_IRQn);
    NVIC_SetPriority(TIM6_DAC_IRQn,2);
    NVIC_EnableIRQ(TIM16_IRQn);
    NVIC_SetPriority(TIM16_IRQn,1);

}
//===========================================================================
// Main function
//===========================================================================

int main(void) {

	    init_tim6();

	    enable_ports_B();
	    enable_VMT();



//	    flash_pattern(0x2111);
//	    while(1){
//
//	    }


//	    init_tim16();
//	    adjust_priorities();



		play_VMT();






	    //clear_queue();


}
